/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import beans.Book;
import database.DB_Access;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author 10jon
 */
public class BooksGUI extends javax.swing.JFrame {

    /**
     * Creates new form BooksGUI
     */
    private DB_Access dba;
    private DefaultListModel<Book> dlm = new DefaultListModel<>();
    private boolean sortingByGenre = false;
    private boolean sortingByPublisher = false;
    private boolean allowedToCall = true;

    public BooksGUI() {
        initComponents();
        this.setSize(800, 600);
        this.setLocationRelativeTo(null);
        dba = DB_Access.getInstance();
        try {
            dba.connect();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Verbindung zur Datenbank konnte nicht hergestellt werden!");
        }
        liBuecher.setModel(dlm);
        try {
            List<Book> books = dba.getAllBooks();
            for (int i = 0; i < books.size(); i++) {
                dlm.addElement(books.get(i));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Bücher konnten nicht geladen werden!");
        }

        try {
            List<String> genres = dba.getGenres();
            cbGenre.addItem("");
            for (int i = 0; i < genres.size(); i++) {
                cbGenre.addItem(genres.get(i));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Genres konnten nicht geladen werden!");
        }

        try {
            List<String> publishers = dba.getPublishers();
            cbVerlag.addItem("");
            for (int i = 0; i < publishers.size(); i++) {
                cbVerlag.addItem(publishers.get(i));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Verläge konnten nicht geladen werden!");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbVerlag = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbGenre = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        tfSearch = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        rbBuch = new javax.swing.JRadioButton();
        rbAutor = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        liBuecher = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tpOutput = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClose(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel3.setLayout(new java.awt.GridLayout(2, 2));

        jLabel1.setText("Verlag");
        jPanel3.add(jLabel1);

        cbVerlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onPublisher(evt);
            }
        });
        jPanel3.add(cbVerlag);

        jLabel2.setText("Genre");
        jPanel3.add(jLabel2);

        cbGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onGenre(evt);
            }
        });
        jPanel3.add(cbGenre);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1));

        tfSearch.setToolTipText("Geben Sie einen Suchbegriff ein . . .");
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                onSearch(evt);
            }
        });
        jPanel4.add(tfSearch);

        jPanel7.setLayout(new java.awt.GridLayout(1, 2));

        rbBuch.setSelected(true);
        rbBuch.setText("Buch");
        rbBuch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBook(evt);
            }
        });
        jPanel7.add(rbBuch);

        rbAutor.setText("Autor");
        rbAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAuthor(evt);
            }
        });
        jPanel7.add(rbAutor);

        jPanel4.add(jPanel7);

        jPanel1.add(jPanel4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setLayout(new java.awt.BorderLayout());

        liBuecher.setBorder(javax.swing.BorderFactory.createTitledBorder("Bücher"));
        liBuecher.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onDetail(evt);
            }
        });
        jScrollPane1.setViewportView(liBuecher);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        tpOutput.setEditable(false);
        tpOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Buchdetails"));
        tpOutput.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(tpOutput);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel6);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClose
        try {
            dba.disconnect();
        } catch (SQLException ex) {
        }
    }//GEN-LAST:event_onClose

    private void onDetail(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onDetail
        try {
            tpOutput.setText(liBuecher.getSelectedValue().toDetailString());
        } catch (NullPointerException ex) {
            tpOutput.setText("");
        }

    }//GEN-LAST:event_onDetail

    private void onGenre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onGenre
        if (allowedToCall) {
            try {
                if (cbGenre.getSelectedItem() == null || cbGenre.getSelectedItem().equals("")) {
                    sortingByGenre = false;
                    allowedToCall=false;
                    cbVerlag.removeAllItems();
                    List<String> publishers = dba.getPublishers();
                    cbVerlag.addItem("");
                    for (int i = 0; i < publishers.size(); i++) {
                        cbVerlag.addItem(publishers.get(i));
                    }
                    allowedToCall=true;
                } else if (!sortingByPublisher) {
                    sortingByGenre = true;
                    allowedToCall = false;
                    List<String> publishers = dba.getPublishersForGenre((String) (cbGenre.getSelectedItem()));
                    cbVerlag.removeAllItems();
                    cbVerlag.addItem("");
                    for (int i = 0; i < publishers.size(); i++) {
                        cbVerlag.addItem(publishers.get(i));
                    }
                    cbVerlag.setSelectedIndex(0);
                    allowedToCall = true;
                } else {
                    sortingByGenre = true;
                }
            } catch (SQLException e) {

            }
        }
        sort();
    }//GEN-LAST:event_onGenre

    private void onPublisher(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onPublisher
        if (allowedToCall) {
            try {
                if (cbVerlag.getSelectedItem() == null || cbVerlag.getSelectedItem().equals("")) {
                    sortingByPublisher = false;
                    allowedToCall=false;
                    String lastGenre = (String)cbGenre.getSelectedItem();
                    cbGenre.removeAllItems();
                    List<String> genres = dba.getGenres();
                    cbGenre.addItem("");
                    int index = 0;
                    for (int i = 0; i < genres.size(); i++) {
                        cbGenre.addItem(genres.get(i));
                        if(genres.get(i).equals(lastGenre)){
                            index = i;
                        }
                    }
                    allowedToCall=true;
                    cbGenre.setSelectedIndex(index+1);
                } else if (!sortingByGenre) {
                    sortingByPublisher = true;
                    allowedToCall=false;
                    List<String> genres = dba.getGenresForPublisher((String) (cbVerlag.getSelectedItem()));
                    cbGenre.removeAllItems();
                    cbGenre.addItem("");
                    for (int i = 0; i < genres.size(); i++) {
                        cbGenre.addItem(genres.get(i));
                    }
                    cbGenre.setSelectedIndex(0);
                    allowedToCall=true;
                } else {
                    sortingByPublisher = true;
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        sort();
    }//GEN-LAST:event_onPublisher

    private void onBook(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBook
        rbAutor.setSelected(false);
    }//GEN-LAST:event_onBook

    private void onAuthor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAuthor
        rbBuch.setSelected(false);
    }//GEN-LAST:event_onAuthor

    private void onSearch(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onSearch
        if (!tfSearch.getText().equals("")) {
            try {
                List<Book> books = null;

                if (rbBuch.isSelected()) {
                    books = dba.searchForTitle(tfSearch.getText());
                } else if (rbAutor.isSelected()) {
                    books = dba.searchForAuthor(tfSearch.getText());
                }
                dlm.clear();
                for (int i = 0; i < books.size(); i++) {
                    dlm.addElement(books.get(i));
                }
                liBuecher.setSelectedIndex(0);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            sort();
        }
    }//GEN-LAST:event_onSearch

    private void sort() {
        try {
            tfSearch.setText("");
            List<Book> books = null;
            String genre = (String) (cbGenre.getSelectedItem());
            String publisher = (String) (cbVerlag.getSelectedItem());
            if (sortingByGenre && sortingByPublisher) {
                books = dba.getBooksForGenreAndPublisher(genre, publisher);
            } else if (sortingByGenre) {
                books = dba.getBooksForGenre(genre);
            } else if (sortingByPublisher) {
                books = dba.getBooksForPublisher(publisher);
            } else {
                books = dba.getAllBooks();
            }
            dlm.clear();
            for (int i = 0; i < books.size(); i++) {
                dlm.addElement(books.get(i));
            }
            liBuecher.setSelectedIndex(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Bücher konnten nicht geladen werden!");
            e.printStackTrace();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BooksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BooksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BooksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BooksGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbGenre;
    private javax.swing.JComboBox<String> cbVerlag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Book> liBuecher;
    private javax.swing.JRadioButton rbAutor;
    private javax.swing.JRadioButton rbBuch;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextPane tpOutput;
    // End of variables declaration//GEN-END:variables
}
