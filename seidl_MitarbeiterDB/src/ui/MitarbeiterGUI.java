/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import beans.Mitarbeiter;
import db.DB_Access;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.Month;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 10jon
 */
public class MitarbeiterGUI extends javax.swing.JFrame {

    /**
     * Creates new form MitarbeiterGUI
     */
    private DB_Access dba = null;

    public MitarbeiterGUI() {
        initComponents();
        try {
            dba = new DB_Access();
        } catch (ClassNotFoundException ex) {
        }
        lbCurrentDB.setText("Verbunden mit: " + dba.currentConnection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfFirstname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDateOfBirth = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfSalary = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfAbt = new javax.swing.JTextField();
        asd = new javax.swing.JLabel();
        tfGender = new javax.swing.JTextField();
        btInsert = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lbCurrentDB = new javax.swing.JLabel();
        btConnect = new javax.swing.JButton();
        btDisconnect = new javax.swing.JButton();
        btDBCreate = new javax.swing.JButton();
        btTableCreate = new javax.swing.JButton();
        btEmpAbt = new javax.swing.JButton();
        btAvg = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClose(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 3));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mitarbeiter einfügen/löschen"));
        jPanel1.setLayout(new java.awt.GridLayout(7, 2));

        jLabel1.setText("Name");
        jPanel1.add(jLabel1);
        jPanel1.add(tfName);

        jLabel2.setText("Vorname");
        jPanel1.add(jLabel2);
        jPanel1.add(tfFirstname);

        jLabel3.setText("Geburtsdatum (yyyy.mm.dd)");
        jPanel1.add(jLabel3);
        jPanel1.add(tfDateOfBirth);

        jLabel4.setText("Gehalt");
        jPanel1.add(jLabel4);
        jPanel1.add(tfSalary);

        jLabel5.setText("Abteilungsnummer");
        jPanel1.add(jLabel5);
        jPanel1.add(tfAbt);

        asd.setText("Geschlecht");
        jPanel1.add(asd);
        jPanel1.add(tfGender);

        btInsert.setText("Einfügen");
        btInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onInsert(evt);
            }
        });
        jPanel1.add(btInsert);

        btRemove.setText("Entfernen");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDelete(evt);
            }
        });
        jPanel1.add(btRemove);

        getContentPane().add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Aktionen"));
        jPanel2.setLayout(new java.awt.GridLayout(8, 1));

        lbCurrentDB.setText("Nicht verbunden");
        jPanel2.add(lbCurrentDB);

        btConnect.setText("Verbinden");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnect(evt);
            }
        });
        jPanel2.add(btConnect);

        btDisconnect.setText("Verebindung trennen");
        btDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDisconnect(evt);
            }
        });
        jPanel2.add(btDisconnect);

        btDBCreate.setText("Datenbank erstellen");
        btDBCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDBCreate(evt);
            }
        });
        jPanel2.add(btDBCreate);

        btTableCreate.setText("Tabelle erstellen");
        btTableCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTableCreate(evt);
            }
        });
        jPanel2.add(btTableCreate);

        btEmpAbt.setText("Mitarbeiter nach Abteilung");
        btEmpAbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEmpAbt(evt);
            }
        });
        jPanel2.add(btEmpAbt);

        btAvg.setText("Durchschnittsgehalt Geschlecht");
        btAvg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAvg(evt);
            }
        });
        jPanel2.add(btAvg);

        jButton1.setText("Datensätze einfügen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onInsertData(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnect
        String dbname = JOptionPane.showInputDialog("Name der Datenbank eingeben:");
        try {
            dba.connect(dbname);
            lbCurrentDB.setText("Verbunden mit: " + dba.currentConnection);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Verbindung konnte nicht hergestellt werden.");
        }
    }//GEN-LAST:event_onConnect

    private void onDisconnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDisconnect
        try {
            dba.disconnect();
            lbCurrentDB.setText("Verbunden mit: " + dba.currentConnection);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Verbindung konnte nicht getrennt werden.");
        }
    }//GEN-LAST:event_onDisconnect

    private void onDBCreate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDBCreate
        String dbname = JOptionPane.showInputDialog("Name der Datenbank eingeben:");
        dba.createDB(dbname);
    }//GEN-LAST:event_onDBCreate

    private void onTableCreate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onTableCreate
        try {
            dba.createTable();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Tabelle existiert bereits");
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Erstellen nicht möglich, keine Verbindung hergestellt");
        }
    }//GEN-LAST:event_onTableCreate

    private void onEmpAbt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEmpAbt

        int department = -1;
        boolean ok = false;
        while (!ok) {
            try {
                department = Integer.parseInt(JOptionPane.showInputDialog("Abteilungsnummer eingeben:"));
                ok = true;
            } catch (NumberFormatException e) {
                ok = false;
            }
        }
        List<Mitarbeiter> list = null;
        try {
            list = dba.getEmployeesFromDepartment(department);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL Fehler");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Abfrage nicht möglich, keine Verbindung hergestellt");
        }
        for (Mitarbeiter m : list) {
            log.append(m.toString() + "\n");
        }

    }//GEN-LAST:event_onEmpAbt

    private void onAvg(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAvg
        String gender = "";
        while (!gender.equals("M") && !gender.equals("F")) {
            gender = JOptionPane.showInputDialog("Geschlecht eingeben (M/F):").toUpperCase();
        }
        try {
            double avg = dba.getAverageSalary(gender);
            log.append(gender + " Durchschnittsgehalt: " + Math.round(avg) + "€\n");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Fehler");
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Abfrage nicht möglich, keine Verbindung hergestellt");
        }
    }//GEN-LAST:event_onAvg

    private void onInsert(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onInsert
        try {
            String name = tfName.getText();
            String vorname = tfFirstname.getText();
            String dateString = tfDateOfBirth.getText();
            System.out.println(dateString);
            String[] dateParts = dateString.split("\\.");
            int year = Integer.parseInt(dateParts[0]);
            int month = Integer.parseInt(dateParts[1]);
            int day = Integer.parseInt(dateParts[2]);
            LocalDate geb_datum = LocalDate.of(year, month, day);
            double gehalt = Double.parseDouble(tfSalary.getText());
            int abt_nr = Integer.parseInt(tfAbt.getText());
            String gender = tfGender.getText();
            if (!((gender.toUpperCase()).equals("M") || (gender.toUpperCase()).equals("W"))) {
                throw new NumberFormatException();
            }
            Mitarbeiter m = new Mitarbeiter(dba.currentPrimary, name, vorname, geb_datum, gehalt, abt_nr, gender);
            dba.insertMitarbeiter(m);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Formatierungsfehler");
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei Datumseingabe");
            e.printStackTrace();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL Fehler");
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Einfügen nicht möglich, keine Verbindung hergestellt");
        }

    }//GEN-LAST:event_onInsert

    private void onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDelete
        int pers_nr = -1;
        boolean ok = false;
        while (!ok) {
            try {
                pers_nr = Integer.parseInt(JOptionPane.showInputDialog("Personalnummer eingeben:"));
                ok = true;
            } catch (NumberFormatException e) {
                ok = false;
            }
        }
        try {
            dba.removeEmployee(pers_nr);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Datensatz konnte nicht gelöscht werden.");
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Löschen nicht möglich, keine Verbindung hergestellt");
        }
    }//GEN-LAST:event_onDelete

    private void onClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClose
        dba.writeCurrentPrimaryToFile();
    }//GEN-LAST:event_onClose

    private void onInsertData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onInsertData
        dba.instertData();
    }//GEN-LAST:event_onInsertData

    public void windowClosing(WindowEvent e){
        dba.writeCurrentPrimaryToFile();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MitarbeiterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel asd;
    private javax.swing.JButton btAvg;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btDBCreate;
    private javax.swing.JButton btDisconnect;
    private javax.swing.JButton btEmpAbt;
    private javax.swing.JButton btInsert;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btTableCreate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCurrentDB;
    private javax.swing.JTextArea log;
    private javax.swing.JTextField tfAbt;
    private javax.swing.JTextField tfDateOfBirth;
    private javax.swing.JTextField tfFirstname;
    private javax.swing.JTextField tfGender;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSalary;
    // End of variables declaration//GEN-END:variables
}
